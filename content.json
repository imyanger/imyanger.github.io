[{"title":"进程","date":"2020-11-24T15:44:33.000Z","path":"2020/11/24/wltx-jc/","text":"进程进程的概念进程是一个具有独立功能的程序关于某个数据集合的一次运行活动。它可以申请和拥有系统资源，是一个动态的概念，是一个活动的主体，不只是程序的代码本身，还包括当前的活动，通过程序计数器的值和处理寄存器的内容来表示。 一个进程实体由程序段、相关数据段和PCB三部分组成，其中PCB是标志一个进程存在的唯一标识，程序段是进程运行的程序的代码，数据段则存储程序运行过程中相关的一些信息。 进程把能够识别程序运行状态的一些变量存放在PCB之中，通过这些变量系统能够更好地了解进程的状况，并在适当的时候进行进程的切换，以避免一些资源的浪费，甚至划分为更小的调度单位线程来提高系统的并发度。 进程的特性 动态性：进程是程序的一次执行，他有着创建、活动、暂停、终止等过程，具有一定的生命周期，是动态地产生、变化和消亡的。动态性是进程最基本的特性。 并发性：指多个进程实体，同存于内存中，能在一段时间内同时运行，并发性是进程的重要特征，同时也是操作系统的重要特征。引入进程的目的就是为了使程序能与其他进程的程序并发执行，以提高资源利用率。 独立性：指进程实体是一个能独立运行、独立获得资源和独立接受调度的基本单位。凡未建立PCB的程序都不能作为一个独立的单位参与运行。 异步性：由于进程的相互制约，使程序具有执行的间断性，即进程按各自独立的、不可预知的速度向前推进。异步性会导致执行结果的不可再现性，位次，在操作系统中必须配置相应的进程同步机制。 结构性：每个进程都配置一个PCB对其进行描述。从结构上看，进程实体是由程序段、数据段和进程控制段三部分组成的。 进程间通信进程（Linux）间的通信方式有管道、消息队列、共享内存、信号量、Socket。 管道 管道，英文为pipe。这是一个我们在学习Linux命令行的时候就会引入的一个很重要的概念。它的发明人是道格拉斯.麦克罗伊，这位也是UNIX上早期shell的发明人。他在发明了shell之后，发现系统操作执行命令的时候，经常有需求要将一个程序的输出交给另一个程序进行处理，也因此，管道应运而生了。 管道可以分为两类：匿名管道和命名管道。 常见的Linux命令 “|” 其实就是匿名管道，表示把一个进程的输出传输到另外一个进程，如： 12echo \"Happyjava\" | awk -F 'j' '&#123;print $2&#125;'# 输出 ava 另外，我们可以通过 mkfifo 命令创建一个命名管道，如： 1mkfifo pipe 一个进程往管道输入数据，会阻塞等待别的进程从管道读取数据。 消息队列 此消息队列不是我们常用的MQ，如kafka，rabbitmq，rocketmq等。 消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法。 每个数据块都被认为含有一个类型，接收进程可以独立地接收含有不同类型的数据结构。我们可以通过发送消息来避免命名管道的同步和阻塞问题。但是消息队列与命名管道一样，每个数据块都有一个最大长度的限制。 使用消息队列进行进程间通信，可能会收到数据块最大长度的限制约束等，这也是这种通信方式的缺点。如果频繁的发生进程间的通信行为，那么进程需要频繁地读取队列中的数据到内存，相当于间接地从一个进程拷贝到另一个进程，这需要花费时间。 共享内存 共享内存这个通信方式就可以很好的解决了拷贝所消耗的时间。系统加载一个进程的时候，分配给进程的内存并不是实际物理内存，而是虚拟内存空间。那么我们可以让两个进程各自拿出一块虚拟地址空间来，然后映射到相同的物理内存中，这样，两个进程虽然有着独立的虚拟内存空间，但有一部分却是映射到相同的物理内存，这就完成了内存共享机制了。 信号量 共享内存最大的问题就是多进程竞争内存的问题，就像类似于我们平时说的线程安全问题，这个时候我们的信号量就上场了。 信号量的本质就是一个计数器，用来实现进程之间的互斥与同步。例如信号量的初始值是 1，然后 a 进程来访问内存1的时候，我们就把信号量的值设为 0，然后进程b 也要来访问内存1的时候，看到信号量的值为 0 就知道已经有进程在访问内存1了，这个时候进程 b 就会访问不了内存1。所以说，信号量也是进程之间的一种通信方式。 Socket Socket套接字也是进程间的通信机制，与其它通信机制不同的是，它可以用于不同机器间的进程通信。如我们的微信APP跟微信服务器通信，其实就是使用的Socket套接字进行通信的。","tags":[{"name":"网络通信","slug":"网络通信","permalink":"https://imyanger.github.io/tags/网络通信/"},{"name":"进程","slug":"进程","permalink":"https://imyanger.github.io/tags/进程/"}]},{"title":"博客文章汇总","date":"2020-08-08T00:08:08.000Z","path":"2020/08/08/bolg/","text":"关于我的所有博文，欢迎阅读。 一个放荡不羁爱自由的小码农！ JavaSE 基础部分JavaEE web部分SpringBoot系列 快速开始 快速开始Spring Boot Spring Boot配置文件与常用注解 Spring Boot便捷开发 文档支持，Spring Boot集成Swagger2 热部署工具，Spring Boot集成devtools 简化代码，Spring Boot使用lombok 数据存储 Spring Boot集成jdbcTemplate Spring Boot集成Spring Data JPA Spring Boot集成MyBatis，基于注解sql方式 Spring Boot集成MyBatis，xml配置文件方式 Spring Boot事务管理器，声明式注解 Spring Boot集成redis Spring Boot多数据源，jdbcTemplate方式 Spring Boot多数据源，JPA方式 Spring Boot多数据源，Mybatis方式 Spring Boot多数据源，Mybatis动态数据源方式 视图模板引擎 Spring Boot使用模板引擎JSP Spring Boot使用模板引擎Thymeleaf Spring Boot使用模板引擎FreeMarker 异步处理 SpringBoot集成RabbitMq示例讲解 SpringCloud系列 SpringCloud系列：1.认识SpringCloud SpringCloud系列：2.Spring Boot项目搭建 SpringCloud系列：3.服务的注册与发现Eureka SpringCloud系列：4.负载均衡Ribbon及断路器Hystrix SpringCloud系列：5.微服务间调用Feign SpringCloud系列：6.微服务网关服务Zuul SpringCloud系列：7.微服务统一配置中心Config SpringCloud系列：8.微服务消息总栈Bus SpringCloud系列：9.微服务服务链路追踪Sleuth SpringCloud系列：10.Spring Cloud Sleuth与Spring Cloud Bus冲突问题 SpringCloud系列：11.高可用注册中心Eurake SpringCloud系列：12.微服务断路器监控系统Hystrix Dashboard SpringCloud系列：13.微服务断路器聚合监控系统Hystrix Turbine Java并发系列数据结构与算法常用工具 简化代码：lombok插件的使用 markdown + 七牛云，让写文更容易 Java源码解析数据库","tags":[{"name":"java","slug":"java","permalink":"https://imyanger.github.io/tags/java/"},{"name":"spring","slug":"spring","permalink":"https://imyanger.github.io/tags/spring/"},{"name":"mysql","slug":"mysql","permalink":"https://imyanger.github.io/tags/mysql/"}]},{"title":"hexo 博客搭建","date":"2018-11-24T15:22:54.000Z","path":"2018/11/24/hexo/","text":"Quick Startinit hexo project1npm install -g hexo-cli 1hexo init //在本地生成hexo模板 1hexo server Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"hexo","slug":"hexo","permalink":"https://imyanger.github.io/tags/hexo/"}]}]